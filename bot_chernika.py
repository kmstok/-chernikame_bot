import os
import logging
import asyncio
import re
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Ñ–∞–π–ª
logging.basicConfig(level=logging.DEBUG, filename="bot_log.log", filemode="w")
logger = logging.getLogger()

TOKEN = "YOUR_BOT_TOKEN"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω
ADMIN_ID = YOUR_ADMIN_ID  # –í–∞—à Telegram ID

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
class OrderForm(StatesGroup):
    user_data = State()

# –ö–Ω–æ–ø–∫–∞ "–ö—É–ø–∏—Ç—å"
buy_button = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ö—É–ø–∏—Ç—å")]],
    resize_keyboard=True
)

# –ö–æ–º–∞–Ω–¥–∞ /start
@router.message(F.text == "/start")
async def start(message: types.Message, state: FSMContext):
    logger.debug("‚úÖ –í–æ—à–µ–ª –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start")
    await message.answer("‚ù§Ô∏è–ü—Ä–∏–≤–µ—Ç–∏–∫! –ó–¥–µ—Å—å –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –º–µ—Ä—á‚ù§Ô∏è", reply_markup=buy_button)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–ö—É–ø–∏—Ç—å"
@router.message(F.text == "–ö—É–ø–∏—Ç—å")
async def ask_order_data(message: types.Message, state: FSMContext):
    logger.debug("‚úÖ –í–æ—à–µ–ª –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ '–ö—É–ø–∏—Ç—å'")
    await state.set_state(OrderForm.user_data)
    await message.answer(
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n"
        "1. –§–ò–û\n"
        "2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "3. –ê–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –°–î–≠–ö\n"
        "4. –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ (—Ç—É–¥–∞ –ø—Ä–∏–¥–µ—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è)\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n+79991234567\n–ú–æ—Å–∫–≤–∞, —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 5\nexample@mail.com",
        reply_markup=types.ReplyKeyboardRemove()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è
@router.message(F.text)
async def process_order(message: types.Message, state: FSMContext):
    logger.debug(f"‚úÖ –í–æ—à–µ–ª –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_order –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    lines = message.text.split("\n")
    lines = [line.strip() for line in lines if line.strip()]

    if len(lines) < 4:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ 4 —Å—Ç—Ä–æ–∫–∏ —Å –≤–∞—à–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ (–§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å, email).")
        return

    full_name, phone, address, email = lines[:4]
    valid, error_message = validate_data(full_name, phone, address, email)
    if not valid:
        await message.answer(error_message)
        return

    order_info = (
        f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:*\n"
        f"üë§ *–§–ò–û:* {full_name}\n"
        f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n"
        f"üè† *–ê–¥—Ä–µ—Å CDEK:* {address}\n"
        f"‚úâ *Email:* {email}"
    )

    try:
        await bot.send_message(ADMIN_ID, order_info, parse_mode="Markdown")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—É: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞—Ä—Ç–∏–Ω–∫—É
    await bot.send_photo(chat_id=message.chat.id, photo="https://imgur.com/a/yTrx5vV")
    await bot.send_photo(chat_id=message.chat.id, photo="https://imgur.com/a/GgqvdxJ")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer("üçÉ–ì–æ—Ç–æ–≤–æ! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–∫—É–ø–∫–æ–πüçÉ\n\n"
                         "–ú–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏. –°–∫–æ—Ä–æ —Å–≤—è–∂—É—Å—å —Å —Ç–æ–±–æ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π ‚ù§Ô∏è")
    await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def validate_data(full_name, phone, address, email):
    phone = re.sub(r'\D', '', phone)

    email_pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    if not re.match(email_pattern, email):
        return False, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ—á—Ç—ã."

    return True, None

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        logger.debug("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        dp.include_router(router)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è PORT –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏
        port = int(os.environ.get("PORT", 5000))  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ—Ä—Ç 5000, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
        logger.debug(f"–ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º—Å—è –∫ –ø–æ—Ä—Ç—É {port}")
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    asyncio.run(main())
