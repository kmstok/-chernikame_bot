import logging
import asyncio
import re
import os
import threading
from flask import Flask
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

# === Flask –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render.com ===
app = Flask(__name__)

@app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

def run_web_server():
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.DEBUG, filename="bot_log.log", filemode="w")
logger = logging.getLogger(__name__)

# === –•–∞—Ä–¥–∫–æ–¥ —Ç–æ–∫–µ–Ω–∞ –∏ ADMIN_ID (–≤—Ä–µ–º–µ–Ω–Ω–æ) ===
TOKEN = "7804678382:AAGQ31AZzpaSoBQSMT-gN-fcNTknbcEEB3M"
ADMIN_ID = 911657126

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

# === –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ø–æ–º–æ—â—å—é FSM ===
class OrderForm(StatesGroup):
    user_data = State()

# === –ö–Ω–æ–ø–∫–∞ "–ö—É–ø–∏—Ç—å" ===
buy_button = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ö—É–ø–∏—Ç—å")]],
    resize_keyboard=True
)

# === –§—É–Ω–∫—Ü–∏—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è Markdown ===
def escape_markdown(text: str) -> str:
    escape_chars = r'\*_`['
    for char in escape_chars:
        text = text.replace(char, f"\\{char}")
    return text

# === –ù–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∏—Å–ø–æ–ª—å–∑—É–µ–º raw.githubusercontent.com) ===
GLAZA_URL = "https://raw.githubusercontent.com/kmstok/-chernikame_bot/main/images/glaza.JPG"
PALEC_URL = "https://raw.githubusercontent.com/kmstok/-chernikame_bot/main/images/palec.JPG"

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ –ø–æ—Ä—è–¥–∫—É –≤–≤–æ–¥–∞) ===
def parse_user_data(text: str):
    """
    –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Å—Ç—Ä–æ–∫–∞–º.
    –û–∂–∏–¥–∞–µ—Ç—Å—è, —á—Ç–æ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –±—É–¥—É—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å:
      - Email (—Å—Ç—Ä–æ–∫–∞, —Å–æ–¥–µ—Ä–∂–∞—â–∞—è —Å–∏–º–≤–æ–ª "@")
      - –¢–µ–ª–µ—Ñ–æ–Ω (—Å—Ç—Ä–æ–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –æ—Å—Ç–∞—ë—Ç—Å—è 11 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä)
      - –û—Å—Ç–∞–ª—å–Ω—ã–µ –¥–≤–µ —Å—Ç—Ä–æ–∫–∏: –æ–¥–Ω—É —Å—á–∏—Ç–∞–µ–º –§–ò–û, –¥—Ä—É–≥—É—é ‚Äì –∞–¥—Ä–µ—Å.
    –ï—Å–ª–∏ –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –∑–∞–ø—è—Ç–∞—è, —Ç–æ —Å –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é —ç—Ç–æ –∞–¥—Ä–µ—Å.
    """
    email_pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    lines = [line.strip() for line in text.split("\n") if line.strip()]
    if len(lines) < 4:
        return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –£–∫–∞–∂–∏—Ç–µ –§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å –∏ email."

    email = None
    phone = None
    others = []
    for line in lines:
        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç @ –∏ —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è–µ—Ç —à–∞–±–ª–æ–Ω—É email, —Ç–æ —ç—Ç–æ email
        if "@" in line and re.match(email_pattern, line):
            email = line
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ–≥–æ, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä, –æ—Å—Ç–∞—ë—Ç—Å—è 11 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —ç—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω
        elif len(re.sub(r'\D', '', line)) in [11, 12]:
            phone = line
        else:
            others.append(line)
    # –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –¥–≤—É—Ö —Å—Ç—Ä–æ–∫ –ø–æ–ø—Ä–æ–±—É–µ–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å: –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—è—Ç–∞—è ‚Äì —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –∞–¥—Ä–µ—Å
    full_name = None
    address = None
    if len(others) >= 2:
        if ',' in others[0]:
            address = others[0]
            full_name = others[1]
        elif ',' in others[1]:
            address = others[1]
            full_name = others[0]
        else:
            if len(others[0].split()) <= len(others[1].split()):
                full_name = others[0]
                address = others[1]
            else:
                full_name = others[1]
                address = others[0]
    else:
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –§–ò–û –∏ –∞–¥—Ä–µ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö."

    if not (email and phone and full_name and address):
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∫–∞–∑–∞–ª–∏ –§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å –∏ email."

    return True, {"full_name": full_name, "phone": phone, "address": address, "email": email}

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö ===
def validate_data(full_name: str, phone: str, address: str, email: str) -> (bool, str):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 11 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä
    phone_digits = re.sub(r'\D', '', phone)
    if len(phone_digits) not in [11, 12]:
        return False, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä (11 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä)."
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ email —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
    email_pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    if not re.match(email_pattern, email):
        return False, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∞–¥—Ä–µ—Å –ø–æ—á—Ç—ã."
    return True, None

# === –ö–æ–º–∞–Ω–¥–∞ /start ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –∏ —Ç–µ–∫—Å—Ç –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º ===
@router.message(F.text == "/start")
async def start(message: types.Message, state: FSMContext):
    logger.debug("‚úÖ –í–æ—à–µ–ª –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start")
    caption_text = "‚ù§Ô∏è–ü—Ä–∏–≤–µ—Ç–∏–∫! –ó–¥–µ—Å—å –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –º–µ—Ä—á‚ù§Ô∏è"
    try:
        await bot.send_photo(
            chat_id=message.chat.id,
            photo=GLAZA_URL,
            caption=caption_text,
            reply_markup=buy_button
        )
        logger.debug("‚úÖ –§–æ—Ç–æ –¥–ª—è /start –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–ª—è /start: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è "–ö—É–ø–∏—Ç—å" ===
@router.message(F.text == "–ö—É–ø–∏—Ç—å")
async def ask_order_data(message: types.Message, state: FSMContext):
    logger.debug("‚úÖ –í–æ—à–µ–ª –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ '–ö—É–ø–∏—Ç—å'")
    await state.set_state(OrderForm.user_data)
    logger.debug("‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ OrderForm.user_data")
    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ –ø—Ä–∏–º–µ—Ä–∞
    await message.answer(
        "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:\n"
        "1. –§–ò–û\n"
        "2. –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
        "3. –ê–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ –°–î–≠–ö\n"
        "4. –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ (—Ç—É–¥–∞ –ø—Ä–∏–¥–µ—Ç —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è)",
        reply_markup=types.ReplyKeyboardRemove()
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
@router.message(F.text)
async def process_order(message: types.Message, state: FSMContext):
    logger.debug(f"‚úÖ –í–æ—à–µ–ª –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ process_order –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    logger.debug(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.text}")

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    current_state = await state.get_state()
    logger.debug(f"‚úÖ –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {current_state}")

    if current_state == 'OrderForm:user_data':
        success, result = parse_user_data(message.text)
        if not success:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {result}")
            await message.answer(result)
            return

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–∞–∑–æ–±—Ä–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        full_name = escape_markdown(result["full_name"])
        phone = escape_markdown(result["phone"])
        address = escape_markdown(result["address"])
        email = escape_markdown(result["email"])

        logger.debug(f"‚úÖ –†–∞–∑–æ–±—Ä–∞–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} - –§–ò–û: {full_name}, –¢–µ–ª–µ—Ñ–æ–Ω: {phone}, –ê–¥—Ä–µ—Å: {address}, Email: {email}")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
        valid, error_message = validate_data(full_name, phone, address, email)
        if not valid:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {error_message}")
            await message.answer(error_message)
            return

        logger.debug("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—à–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É. –û—Ç–ø—Ä–∞–≤–ª—è—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∞–¥–º–∏–Ω—É.")

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        order_info = (
            f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:*\n"
            f"üë§ *–§–ò–û:* {full_name}\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n"
            f"üè† *–ê–¥—Ä–µ—Å CDEK:* {address}\n"
            f"‚úâ *Email:* {email}"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∞–¥–º–∏–Ω—É (—Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Markdown)
        try:
            await bot.send_message(ADMIN_ID, order_info, parse_mode="Markdown")
            logger.debug(f"‚úÖ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}.")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—Ç–µ–∫—Å—Ç –∏ —Ñ–æ—Ç–æ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏)
        confirmation_caption = (
            "üçÉ–ì–æ—Ç–æ–≤–æ! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–∫—É–ø–∫–æ–πüçÉ\n\n"
            "–ú–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, —á—Ç–æ–±—ã —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏. –°–∫–æ—Ä–æ —Å–≤—è–∂—É—Å—å —Å —Ç–æ–±–æ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π ‚ù§Ô∏è"
        )
        try:
            await bot.send_photo(
                chat_id=message.chat.id,
                photo=PALEC_URL,
                caption=confirmation_caption
            )
            logger.debug("‚úÖ –§–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.")
        
        await state.clear()  # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    else:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É.")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ.")

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ ===
async def main():
    try:
        logger.debug("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        dp.include_router(router)
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == '__main__':
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ, —á—Ç–æ–±—ã Render –æ–±–Ω–∞—Ä—É–∂–∏–ª –æ—Ç–∫—Ä—ã—Ç—ã–π –ø–æ—Ä—Ç
    threading.Thread(target=run_web_server, daemon=True).start()
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())
