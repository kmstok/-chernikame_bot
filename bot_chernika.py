import loggimport logging
import asyncio
import re
import os
import threading
from flask import Flask
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.markdown import escape_md  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω–∏—Ä—É—é—â–∏–π –º–µ—Ç–æ–¥

# === Flask –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render.com ===
app = Flask(__name__)

@app.route('/')
def index():
    return "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.errorhandler(500)
def server_error(e):
    logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
    return "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", 500

def run_web_server():
    port = int(os.environ.get("PORT", 5000))
    app.run(host="0.0.0.0", port=port)

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(level=logging.DEBUG, filename="bot_log.log", filemode="w")
logger = logging.getLogger(__name__)

# === –•–∞—Ä–¥–∫–æ–¥ —Ç–æ–∫–µ–Ω–∞ –∏ ADMIN_ID ===
TOKEN = "7804678382:AAGQ31AZzpaSoBQSMT-gN-fcNTknbcEEB3M"
ADMIN_ID = 911657126

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher()
dp["bot"] = bot  # –°–≤—è–∑—ã–≤–∞–µ–º –±–æ—Ç–∞ —Å –¥–∏—Å–ø–µ—Ç—á–µ—Ä–æ–º
router = Router()

# === –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å –ø–æ–º–æ—â—å—é FSM ===
class OrderForm(StatesGroup):
    user_data = State()

# === –ö–Ω–æ–ø–∫–∞ "–ö—É–ø–∏—Ç—å" ===
buy_button = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="–ö—É–ø–∏—Ç—å")]],
    resize_keyboard=True
)

# === –ù–æ–≤—ã–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è ===
GLAZA_URL = "https://raw.githubusercontent.com/kmstok/-chernikame_bot/main/images/glaza.JPG"
PALEC_URL = "https://raw.githubusercontent.com/kmstok/-chernikame_bot/main/images/palec.JPG"

# === –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
def parse_user_data(text: str):
    email_pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    lines = [line.strip() for line in text.split("\n") if line.strip()]
    if len(lines) < 4:
        return False, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö. –£–∫–∞–∂–∏—Ç–µ –§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å –∏ email."

    email = None
    phone = None
    others = []
    for line in lines:
        if "@" in line and re.match(email_pattern, line):
            email = line
        elif len(re.sub(r'\D', '', line)) in [11, 12]:
            phone = line
        else:
            others.append(line)

    if len(others) >= 2:
        if ',' in others[0]:
            address, full_name = others[0], others[1]
        elif ',' in others[1]:
            address, full_name = others[1], others[0]
        else:
            full_name, address = (others[0], others[1]) if len(others[0].split()) <= len(others[1].split()) else (others[1], others[0])
    else:
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –§–ò–û –∏ –∞–¥—Ä–µ—Å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö."

    if not (email and phone and full_name and address):
        return False, "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É–∫–∞–∑–∞–ª–∏ –§–ò–û, —Ç–µ–ª–µ—Ñ–æ–Ω, –∞–¥—Ä–µ—Å –∏ email."

    return True, {"full_name": full_name, "phone": phone, "address": address, "email": email}

# === –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö ===
def validate_data(full_name: str, phone: str, address: str, email: str):
    phone_digits = re.sub(r'\D', '', phone)
    if len(phone_digits) not in [11, 12]:
        return False, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞."

    email_pattern = r'^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+\.[a-zA-Z0-9-.]+$'
    if not re.match(email_pattern, email):
        return False, "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email."

    return True, None

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@router.message(F.text == "/start")
async def start(message: types.Message, state: FSMContext):
    logger.debug("‚úÖ –í–æ—à–µ–ª –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /start")
    caption_text = "‚ù§Ô∏è–ü—Ä–∏–≤–µ—Ç–∏–∫! –ó–¥–µ—Å—å –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –º–µ—Ä—á‚ù§Ô∏è"
    try:
        await bot.send_photo(message.chat.id, GLAZA_URL, caption=caption_text, reply_markup=buy_button)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ.")

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å" ===
@router.message(F.text == "–ö—É–ø–∏—Ç—å")
async def ask_order_data(message: types.Message, state: FSMContext):
    logger.debug("‚úÖ –í–æ—à–µ–ª –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ '–ö—É–ø–∏—Ç—å'")
    await state.set_state(OrderForm.user_data)
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ:\n1. –§–ò–û\n2. –¢–µ–ª–µ—Ñ–æ–Ω\n3. –ê–¥—Ä–µ—Å\n4. Email",
        reply_markup=types.ReplyKeyboardRemove()
    )

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö ===
@router.message(F.text)
async def process_order(message: types.Message, state: FSMContext):
    logger.debug(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {message.from_user.id}")

    current_state = await state.get_state()
    if current_state == OrderForm.user_data.state:
        success, result = parse_user_data(message.text)
        if not success:
            await message.answer(result)
            return

        full_name = escape_md(result["full_name"])
        phone = escape_md(result["phone"])
        address = escape_md(result["address"])
        email = escape_md(result["email"])

        valid, error_message = validate_data(full_name, phone, address, email)
        if not valid:
            await message.answer(error_message)
            return

        order_info = (
            f"üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:*\n"
            f"üë§ *–§–ò–û:* {full_name}\n"
            f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {phone}\n"
            f"üè† *–ê–¥—Ä–µ—Å:* {address}\n"
            f"‚úâ *Email:* {email}"
        )

        try:
            await bot.send_message(ADMIN_ID, order_info, parse_mode="Markdown")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–¥–∞—á–µ –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω—É.")
            return

        confirmation_caption = "üçÉ–ì–æ—Ç–æ–≤–æ! –ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–∫—É–ø–∫–æ–πüçÉ"
        try:
            await bot.send_photo(message.chat.id, PALEC_URL, caption=confirmation_caption)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ.")

        await state.clear()
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")

# === –ö–æ–º–∞–Ω–¥–∞ /help ===
@router.message(F.text == "/help")
async def help_command(message: types.Message):
    await message.answer("–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞–∫–∞–∑–∞—Ç—å –º–µ—Ä—á. –ù–∞–∂–º–∏—Ç–µ '–ö—É–ø–∏—Ç—å' –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º.")

# === –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ===
async def main():
    try:
        dp.include_router(router)
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

if __name__ == '__main__':
    threading.Thread(target=run_web_server, daemon=True).start()
    loop = asyncio.get_event_loop()
    loop.run_until_complete(main())
